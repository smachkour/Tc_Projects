<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{b22202e6-5653-4fea-96aa-8afc1651835b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
// 1. CheckBounds aan die de waarde tussen 15 en 24 regelt
waarde : DINT;       // De waarde die je wilt controleren
gecorrigeerdeWaarde : DINT;

// 2. CheckDivByte
testDivisor : BYTE;
result : BYTE;

// 3. CheckDivReal? Int staat niet op infosys
erg : REAL; // Resultaat van de deling
v1 : REAL := 799; // De dividend
d : REAL; // De divisor

// 4. CheckDivWord
resultREAL : REAL;
dividend : WORD := 1000; // Vervang door de waarde die je wilt delen
divisor : WORD := 0;     // Vervang door de waarde waardoor je wilt delen

// 5. CheckRangeSigned
getesteWaarde : DINT;
resultaat : DINT;
minGrens : DINT := -4095; // Definieer de ondergrens van het bereik
maxGrens : DINT := 4095;  // Definieer de bovengrens van het bereik

// 6. CheckRangeInt met TYPES voor waarden van 0 t.e.m. 32.767
testValue : INT; // De waarde die je wilt testen
checkedValue : INT;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Checker functions
// Maak de checker functions aan die gezien werden tijdens de les:

// 1. CheckBounds aan die de waarde tussen 15 en 24 regelt
waarde := 26; // Een voorbeeldwaarde
gecorrigeerdeWaarde := CheckBounds(waarde, 15, 24);

// 2. CheckDivByte
testDivisor := 0; // Test met een divisor van 0
result := CheckDivByte(testDivisor);

// 3. CheckDivReal? Int staat niet op infosys
d := 0; // Stel de divisor in op een waarde die getest moet worden, bijvoorbeeld 0
d := CheckDivReal(d); // Roep de CheckDivReal functie aan om te controleren op deling door nul

erg := v1 / d; // Voer de deling uit met de gecontroleerde divisor

// 4. CheckDivWord
divisor := CheckDivWord(divisor); // Controleer de divisor
resultREAL := WORD_TO_REAL(dividend) / WORD_TO_REAL(divisor); // Voer de deling uit

// 5. CheckRangeSigned
// Stel de te testen waarde in
getesteWaarde := 5000; // Een waarde buiten het bereik om de functionaliteit te testen

// Roep de CheckRangeSigned functie aan om de waarde te controleren en aan te passen
resultaat := CheckRangeSigned(getesteWaarde, minGrens, maxGrens);

// 6. CheckRangeInt met TYPES voor waarden van 0 t.e.m. 32.767
// Test de functie met een waarde buiten het bereik
testValue := 40000; // Een waarde boven het maximale bereik
checkedValue := CheckRangeInt(testValue); // Zou 32767 moeten retourneren]]></ST>
    </Implementation>
    <Folder Name="VISUs" Id="{7da1aebe-4416-4827-ad4a-c0e50d82c18a}" />
    <LineIds Name="MAIN">
      <LineId Id="6" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="65" Count="2" />
      <LineId Id="62" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="79" Count="3" />
      <LineId Id="78" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="85" Count="1" />
      <LineId Id="83" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>